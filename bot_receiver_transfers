import pika, sys, os
import telebot
import json
import traceback
import threading

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wish_swap.settings')
import django
django.setup()

from wish_swap.settings_local import NETWORKS
from wish_swap.payments.api import parse_payment
from wish_swap.transfers.models import Transfer
from wish_swap.transfers.api import parse_execute_transfer_message

TOKEN = ''
bot = telebot.TeleBot(TOKEN)
GROUP_ID = -<int>

class Receiver(threading.Thread):
    def __init__(self, network):
        super().__init__()
        self.network = network

    def run(self):
        connection = pika.BlockingConnection(pika.ConnectionParameters(
            'rabbitmq',
            5672,
            os.getenv('RABBITMQ_DEFAULT_VHOST', 'wish_swap'),
            pika.PlainCredentials(os.getenv('RABBITMQ_DEFAULT_USER', 'wish_swap'),
                                  os.getenv('RABBITMQ_DEFAULT_PASS', 'wish_swap')),
            heartbeat=7200,
            blocked_connection_timeout=7200
        ))
        channel = connection.channel()
        channel.queue_declare(
            queue=self.network+'-bot',
            durable=True,
            auto_delete=False,
            exclusive=False
        )
        channel.basic_consume(
            queue=self.network+'-bot',
            on_message_callback=self.callback
        )
        print(f'{self.network}: queue was started', flush=True)
        channel.start_consuming()

    def payment(self, message):
        print(f'{self.network}: payment message has been received\n', flush=True)
        parse_payment(message, self.network)

    def execute_transfer(self, message):
        print(f'{self.network}: execute transfer message has been received\n', flush=True)
        parse_execute_transfer_message(message, self.network)

    def callback(self, ch, method, properties, body):
        # print('RECEIVER: received', method, properties, body, flush=True)
        try:
            message = json.loads(body.decode())
            if message.get('status', '') == 'COMMITTED':
                getattr(self, properties.type, self.unknown_handler)(message)
        except Exception as e:
            print('\n'.join(traceback.format_exception(*sys.exc_info())),
                  flush=True)
        else:
            ch.basic_ack(delivery_tag=method.delivery_tag)

    def unknown_handler(self, message):
        print(f'{self.network}: unknown message has been received\n', message, flush=True)

if __name__ == '__main__':
    for network in NETWORKS.keys():
        receiver = Receiver(network)
        receiver.start()
        receiver = Receiver(network + '-transfers')
        receiver.start()
    bot.polling(none_stop=True)
